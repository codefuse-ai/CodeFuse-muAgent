{
  "id": 27900001,
  "gmtCreate": "2024-07-17T07:20:35.000+00:00",
  "gmtModified": "2024-07-17T07:20:35.000+00:00",
  "toolKey": "OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response",
  "toolDefinition": {"description":"演示tool的返回结果","name":"OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response","parameters":{"description":"演示tool的返回结果","properties":{"button":{"description":"非必填，按钮名称，默认值为「重试」","requestType":"body","type":"string"},"pathVariable":{"description":"路径参数","requestType":"path","type":"string"},"requestParam":{"description":"请求参数","requestType":"query","type":"string"}},"required":[],"type":"object"},"result":{"description":"返回信息","properties":{},"type":"object"}},
  "toolId": null,
  "description": "演示tool的返回结果",
  "toolName": "演示tool返回结果",
  "pauseStatus": "EXECUTING",
  "transparentInfo": null,
  "intention": null,
  "input": null,
  "output": null,
  "exeNormal": true,
  "message": null,
  "requestGroovy": "package com.alipay.muagent.web\n\nimport com.alipay.muagent.model.connector.http.HttpParameters\nimport com.google.gson.Gson\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonObject\n\n/**\n * http request 转换模板脚本\n * 脚本的输入为：一个 json，该 json 由算法根据 问题 以及 参数定义 拼装成的扁平的结构化数据\n * 这里扁平的含义为：该 json 只有一层对象，不存在嵌套的复杂对象，嵌套的结构通过合并的属性名来表示\n * 如： {\"a.b.c\": true, \"a.c\": \"hi\", \"k\":123} 实际表达的数据结构为 {\"k\":123,\"a\":{\"b\":{\"c\":true},\"c\":\"hi\"}}\n * 脚本的输出为实际 htpp 请求的参数信息\n */\n\n\n/**\n * 请求的元数据信息\n */\nclass RequestMeta {\n\n    /**\n     * 参数的请求类型，query/path/body\n     */\n    String requestType\n\n    /**\n     * 参数的数据类型，string,array,object,boolean,number,int\n     */\n    String paramType\n\n    RequestMeta(String requestType, String paramType) {\n        this.requestType = requestType\n        this.paramType = paramType\n    }\n}\n\n/**\n * 将 request 转换为 实际 api 的调用参数\n * request 为 算法 根据用户的 自然语言 问题拼接成的 结构化数据\n *\n * @param request\n * @return\n */\ndef convertRequest(String request) {\n    request = preHandle(request)\n    HttpParameters httpParameters = convertHttpParams(request)\n    postHandle(httpParameters, request)\n    return new Gson().toJson(httpParameters)\n}\n\n/**\n * 通用转换逻辑，根据字段的 RequestMeta.requestType，将对应的参数放入到 htpp 请求的不同位置\n * body: 表明该参数为请求体参数，放入 HttpParameters.requestBody\n * query：表明该参数为查询参数，放入 pathParameters.queryParameters\n * path: 表明该参数为路径参数，放入 pathParameters.pathParameters\n *\n * @param request\n * @return\n */\ndef convertHttpParams(String request) {\n    HttpParameters httpParameters = HttpParameters.builder().build()\n    Map<String, RequestMeta> requestMap = getRequestMap()\n\n    if (Objects.isNull(requestMap) || requestMap.isEmpty()) {\n        return httpParameters;\n    }\n\n    JsonObject root = new Gson().fromJson(request, JsonObject.class)\n    // 合并一下默认值\n    mergeJsonObject(root, getDefaultValues())\n\n    Map<String, String> pathParameters = new HashMap<>()\n    Map<String, String> queryParameters = new HashMap<>()\n    Map<String, String> headerParameters = new HashMap<>()\n    JsonObject requestBody = new JsonObject()\n\n    root.keySet().forEach(key -> {\n        RequestMeta requestMeta = requestMap.get(key)\n        if (Objects.isNull(requestMeta)) {\n            return\n        }\n        switch (requestMeta.getRequestType()) {\n            case \"path\":\n                pathParameters.put(key, root.get(key).getAsString())\n                break\n            case \"query\":\n                queryParameters.put(key, root.get(key).getAsString())\n                break\n            case \"body\":\n                initRequestBody(key.split(\"\\\\.\"), 0, root.get(key), requestBody)\n                break\n            default:\n                printf(\"un-support request type %s\", requestMeta.getRequestType())\n        }\n    })\n\n    httpParameters.setRequestBody(requestBody.toString())\n    httpParameters.setPathParameters(pathParameters)\n    httpParameters.setQueryParameters(queryParameters)\n    httpParameters.setHeaderParameters(headerParameters)\n\n    headerParameters.put(\"Cookie\", \"cna=i9nzGbHEL3ECASp4S38wMG0F; ALIPAYCHAIRBUCJSESSIONID=675144e0-53b7-4dd8-af1f-4e37ae943a57; isEnableLocale=disabled; acLoginFrom=antcloud_login; nav_original_path=iam.alipay.com; tenant=alipay; sdvt=bgOM9o6NnHNOrN0xnX53pA3r5DjDsqvn; ipaybuservice_center_region=1; ordv=8CNhbOuqBw..; bs_n_lang=zh_CN; ALIPAYIBUSERVICEJSESSIONID=GZ00vvj12mkOsKnwPjdavnQnlkAtzTiprodmngGZ00; receive-cookie-deprecation=1; _CHIPS-ALIPAYCHAIRBUCJSESSIONID=675144e0-53b7-4dd8-af1f-4e37ae943a57; _CHIPS-yuque_ctoken=75XDPBG7zQAB-Xo19Bcv3UUk; yuque_ctoken=75XDPBG7zQAB-Xo19Bcv3UUk; mustAddPartitionedTag=noNeedToAdd; csrfToken=TvwYyLB6p0AcZcKKjW9YdllF; _CHIPS-session.cookieNameId=ALIPAYJSESSIONID; ALI_PAMIR_SID=U13NKnYu05765eocOF+A9RIZDEz#tYJUj+UTSkWxLI90yXyFZDEz; userId=169704; _CHIPS-ctoken=SwsqFItMe8Lme3yD; __TRACERT_COOKIE_bucUserId=169704; session.cookieNameId=ALIPAYBUMNGJSESSIONID; _CHIPS-ALIPAYJSESSIONID=RZ55v7M0mPoHKzIAE6wwmOraCSNoFCauthRZ55GZ00; SSO_LANG_V2=ZH-CN; SSO_EMPID_HASH_V2=ad22d96f09a3bba24ee8b261d81a62cd; SSO_BU_HASH_V2=a619f8465211eef29f6cefe837ebc3c1; isg=BNjYd9b2C7PIRiZ1LrD-Emf6qQBqwTxLD51cxBLI-5PkrXKXutNx2zOe4-WdvfQj; antcode_user_extern_no=169704; ALIPAYJSESSIONID=GZ00E923FF5A7CF642FFBECEE946DC468BACkujutaGZ00; zone=GZ00F; LOCALE=zh_CN; ALIPAYBUMNGJSESSIONID=GZ00QhXyAMDXYqmihLAqGtY5doOIoSantbuserviceGZ00; ctoken=6KoG-6IlKhQGwo14; IAM_TOKEN=eyJraWQiOiJkZWZhdWx0IiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJjbmwiOiJCVUMiLCJzdWIiOiJyZW5tYW8ucm0iLCJhdXRoX3RwIjpbIlpGQVJCIl0sImlzcyI6ImJ1bW5nLmFsaXBheS5jb20iLCJub25jZSI6IjUxNGU1ZjM0Iiwic2lkIjoiMjQ5MzgxOCIsImR2YyI6IjtOT1JNQUw7IiwiYXVkIjoiKiIsIm5iZiI6MTcyODY0NTQ1Niwic25vIjoiMTY5NzA0IiwidG50X2lkIjoiQUxJUFczQ04iLCJuYW1lIjoi5oCA5qGRIiwiZXhwIjoxNzI4NzMxOTE2LCJpYXQiOjE3Mjg2NDU1MTYsImp0aSI6IjNkZmI1MDA1OTZjMTQ4Yzc5OTMxNDA0NmZlOTZlNGYxIn0.efRbrzupJfwfiBuyRxFPQf2xo_FoCa2DRkpPam0YLRp5ZGDw7mG-novuKFr8qeJhz-BvkCDZMabCozpJtNa4xg; IAM_TOKEN_HTTP=eyJraWQiOiJkZWZhdWx0IiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJjbmwiOiJCVUMiLCJzdWIiOiJyZW5tYW8ucm0iLCJhdXRoX3RwIjpbIlpGQVJCIl0sImlzcyI6ImJ1bW5nLmFsaXBheS5jb20iLCJub25jZSI6IjU3ZDRjOTEiLCJzaWQiOiIyNDkzODE4IiwiZHZjIjoiO05PUk1BTDsiLCJhdWQiOiJ1bl9zZWN1cmVfZ3JvdXAiLCJuYmYiOjE3Mjg2NDU0NTYsInNubyI6IjE2OTcwNCIsInRudF9pZCI6IkFMSVBXM0NOIiwibmFtZSI6IuaAgOahkSIsImV4cCI6MTcyODY0OTExNiwiaWF0IjoxNzI4NjQ1NTE2LCJqdGkiOiIyNmNkMGJmMzQ3Yjc0MmQ0YWQ5NTc1ODllZTYzZTdkYyJ9.IpEdBcO9_kka7G5Dwlm-Mtk6KY9NGipvfQtBW3oppKIp-LdhzkAUuE0Wbu9CQ2T9NCogZRVYpzNTAgbDKc2UQQ; authorization=hmac%200000037169-1%3AVWpERGo2SGszUzlPVVVTb2ttem85YTJmd0J5Uml3QlQ%3D~0\\$MYJF; rtk=2KgPmhE9wJu9O/nWsPgcJJ8PsD717BuLuk98xnCKSH+/WXr0sP0; BUSERVICE_SSO_V2=E8B74F38FEE5871FD6E224BB48861CF9123F7BC88534B113641C374BE01ACDED; spanner=JPqdGa3zF0pFNAA/urXj0ywLlIqCnVguXt2T4qEYgj0=\")\n\n    return httpParameters\n}\n\n/**\n * 合并 json\n *\n * @param base\n * @param addition\n * @return\n */\ndef mergeJsonObject(JsonObject base, JsonObject addition) {\n    if (Objects.isNull(base) || Objects.isNull(addition)) {\n        return\n    }\n\n    for (Map.Entry<String, JsonElement> entry : addition.entrySet()) {\n        base.add(entry.getKey(), entry.getValue())\n    }\n}\n\n/**\n * 获取用户配置的默认值\n *\n * @return\n */\ndef getDefaultValues() {\n    String defaultJson = \"{}\"\n    return new Gson().fromJson(defaultJson, JsonObject.class)\n}\n\n/**\n * 拼装 http 的 body 信息，将算法拼接的平铺的 json 立体化为有层次的 json\n * {\"a.b.c\": true, \"a.c\": \"hi\", \"k\":123} => {\"k\":123,\"a\":{\"b\":{\"c\":true},\"c\":\"hi\"}}\n *\n * @param keys\n * @param index\n * @param value\n * @param requestBody\n * @return\n */\ndef initRequestBody(String[] keys, int index, Object value, JsonObject requestBody) {\n\n    if (index == keys.length - 1) {\n        requestBody.add(keys[index], value)\n        return\n    }\n\n    String key = keys[index]\n    if (requestBody.has(key)) {\n        initRequestBody(keys, index + 1, value, requestBody.getAsJsonObject(key))\n    } else {\n        JsonObject object = new JsonObject()\n        requestBody.add(key, object)\n        initRequestBody(keys, index + 1, value, object)\n    }\n}\n\n/**\n * 用户自定义预处理函数\n *\n * @param request\n */\ndef preHandle(String request) {\n    return request\n}\n\n/**\n * 用户自定义后处理函数\n * 通用转换脚本转换的结构无法满足需求，例如有特定的鉴权逻辑需要签名、有定制化的参数需要添加等\n *\n * @param request\n */\ndef postHandle(HttpParameters httpParameters, String request) {\n}\n\ndef getRequestMap() {\n    Map<String, RequestMeta> requestMap = new HashMap<>()\n\n    requestMap.put(\"button\", new RequestMeta(\"body\", \"string\"))\n    requestMap.put(\"pathVariable\", new RequestMeta(\"path\", \"string\"))\n    requestMap.put(\"requestParam\", new RequestMeta(\"query\", \"string\"))\n\n    return requestMap\n}\n\n/**\n * 调用执行转换逻辑\n */\nconvertRequest(request)\n",
  "responseGroovy": "import com.google.gson.Gson\nimport com.google.gson.JsonObject\nimport org.springframework.util.CollectionUtils\n\n/**\n * http response 转换模板脚本\n * 脚本的输入为调用接口后的实际返回值\n * 脚本的主要完成两项工作：\n * 1. 从实际返回值中提取实际需要的数据\n * 2. 将选好的数据打平成为扁平化的数据\n * 脚本的输出为扁平化的数据，该数据会作为算法的输入，算法会对该结果进行自然语言化\n */\n\n/**\n * response 转换主函数\n *\n * @param response\n * @return\n */\ndef convertResponse (String response) {\n    response = preHandle(response)\n    def result = convertResult(response)\n    result = postHandle(result)\n    return result\n}\n\n/**\n * 将接口返回的数据按照用户在页面上的定义削减打平\n * {\"k\":123,\"a\":{\"b\":{\"c\":true},\"c\":\"hi\"}} => {\"a.b.c\": true, \"a.c\": \"hi\", \"k\":123}\n *\n * @param response\n * @return\n */\ndef convertResult(String response) {\n    List<Meta> metas = getMetas()\n    if (CollectionUtils.isEmpty(metas)) {\n        return response\n    }\n    JsonObject root = new Gson().fromJson(response, JsonObject.class)\n\n\n    JsonObject result = new JsonObject();\n\n    metas.forEach(meta -> {\n        initResponseBody(meta.getKey().split(\"\\\\.\"), meta.getKey(), 0, root, result)\n    })\n\n    return new Gson().toJson(result)\n}\n\n/**\n * 用户自定义预处理函数\n *\n * @param request\n */\ndef preHandle(String response) {\n    return response\n}\n\n/**\n * 用户自定义后处理函数\n * 通用转换脚本转换的结构无法满足需求\n *\n * @param request\n */\ndef postHandle(String response) {\n    return response\n}\n\n/**\n * 转换 response，根据用户指定的路径，从 response 中提取该值，并放置到扁平化的结果中去\n *\n * @param keys\n * @param finalKey\n * @param index\n * @param root\n * @param result\n * @return\n */\ndef initResponseBody(String[] keys, String finalKey, int index, JsonObject root, JsonObject result) {\n\n    if (index == keys.length - 1) {\n        if (root.has(keys[index]))\n            result.add(finalKey, root.get(keys[index]))\n        return\n    }\n\n    if (index >= keys.length - 1) {\n        return\n    }\n\n    String key = keys[index]\n    if (root.has(key)) {\n        initResponseBody(keys, finalKey, index + 1, root.getAsJsonObject(key), result)\n    }\n}\n\n/**\n * 元数据信息，用户指定需要哪些值\n */\nclass Meta {\n\n    String key;\n\n    Meta(String key) {\n        this.key = key\n    }\n}\n\n/**\n * 获取用户指定有效数据的接口\n *\n * @return\n */\ndef getMetas() {\n    List<Meta> metas = new ArrayList<>();\n\n\n\n    return metas;\n}\n\n/**\n * 开始执行转换\n */\nconvertResponse(response)",
  "summaryGroovy": null,
  "manifestSchema": {"api":{"type":"http"},"auth":{"type":"none"},"description_for_human":"演示tool的返回结果","description_for_model":"演示tool的返回结果","headers":{},"name_for_human":"ToolSampleController.queryEditableResponse_response","schema_version":"v1"},
  "toolApiPath": "OPSGPT./.POST",
  "toolProtocol": "HTTP",
  "serverUrl": null,
  "apiSchema": {"info":{"description":"演示tool的返回结果","title":"ToolSampleController.queryEditableResponse_response","version":"0.0.1"},"openapi":"3.0.0","paths":{"http":{"method":"POST","parameters":[{"in":"body","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-0"}},{"in":"query","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-1"}},{"in":"path","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-2"}}],"path":"/api/tool/sample/{pathVariable}","responses":{"200":{"application/json":{"$ref":"#/definitions/BaseResult_ToolResponse_"}}}}},"servers":[{"url":"https://opsgptcore-pre.alipay.com/api/tool/sample/{pathVariable}"}]},
  "operatorCreate": "169704",
  "operatorModified": "169704",
  "version": "3",
  "owner": "169704",
  "deleted": null,
  "type": "OPEN",
  "status": "PROD_PUBLISHED",
  "vdbPk": "447890596018669520",
  "selectSamples": "[null]",
  "selectVars": "[{}]",
  "invokeType": "SYNC",
  "tag": "SINGLE_TOOL:OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response",
  "toolExtraInfo": {
    "errMessage": null,
    "devVdbPk": "447890596018692596",
    "prodVdbPk": null,
    "summaryModel": null,
    "stepConfigList": null,
    "nexExtraInfo": null,
    "ispInfo": null,
    "rpcUniqueId": null
  },
  "pauseStatusList": null,
  "configMap": null
}