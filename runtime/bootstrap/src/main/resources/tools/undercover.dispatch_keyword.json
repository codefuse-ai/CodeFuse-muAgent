{
  "id": 2,
  "gmtCreate": "2024-07-17T07:20:35.000+00:00",
  "gmtModified": "2024-07-17T07:20:35.000+00:00",
  "toolKey": "undercover.dispatch_keyword",
  "toolDefinition": {"description":"演示tool的返回结果","name":"OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response","parameters":{"description":"演示tool的返回结果","properties":{"button":{"description":"非必填，按钮名称，默认值为「重试」","requestType":"body","type":"string"},"pathVariable":{"description":"路径参数","requestType":"path","type":"string"},"requestParam":{"description":"请求参数","requestType":"query","type":"string"}},"required":[],"type":"object"},"result":{"description":"返回信息","properties":{},"type":"object"}},
  "toolId": null,
  "description": "角色分配和单词分配",
  "toolName": "角色分配和单词分配",
  "pauseStatus": "EXECUTING",
  "transparentInfo": null,
  "intention": null,
  "input": null,
  "output": null,
  "exeNormal": true,
  "message": null,
  "requestGroovy": "import com.alipay.muagent.model.connector.http.HttpParameters\nimport com.google.gson.Gson\n\nclass Content {\n    String text;\n}\n\ndef randRole() {\n    def words = Arrays.asList(\n            [\"苹果\", \"梨\"],\n            [\"猫\", \"狗\"],\n            [\"摩托车\", \"自行车\"],\n            [\"太阳\", \"月亮\"],\n            [\"红色\", \"粉色\"],\n            [\"大象\", \"长颈鹿\"],\n            [\"铅笔\", \"钢笔\"],\n            [\"牛奶\", \"豆浆\"],\n            [\"河\", \"湖\"],\n            [\"面包\", \"蛋糕\"],\n            [\"饺子\", \"包子\"],\n            [\"冬天\", \"夏天\"],\n            [\"电视\", \"电脑\"],\n            [\"铅笔\", \"橡皮\"],\n            [\"跑步\", \"游泳\"],\n            [\"手机\", \"平板\"],\n            [\"鱼\", \"虾\"],\n            [\"空调\", \"风扇\"],\n            [\"马\", \"驴\"],\n            [\"书\", \"杂志\"],\n            [\"草\", \"树\"],\n            [\"杯子\", \"碗\"],\n            [\"米饭\", \"面条\"],\n            [\"饼干\", \"蛋糕\"],\n            [\"雨伞\", \"雨衣\"],\n            [\"猪\", \"牛\"],\n            [\"白菜\", \"生菜\"],\n            [\"吉他\", \"钢琴\"],\n            [\"飞机\", \"火车\"],\n            [\"镜子\", \"眼镜\"]\n    )\n    def player = [[\"张伟\", \"agent_张伟\"], [ \"李静\", \"agent_李静\"], [\"王鹏\", \"agent_王鹏\"], [\"人类玩家\", \"agent_人类玩家\"]]\n    player.shuffle()\n    def role = Arrays.asList(\"平民_1\", \"平民_2\", \"平民_3\", \"卧底_1\")\n    role.shuffle()\n    def random = new Random()\n    def wordIdx = random.nextInt(65536) % words.size()\n    def underCoverWordIdx = random.nextInt(65536) % 2\n    return (0..3).collect { i ->\n        {\n            def r = new HashMap<String, Object>()\n            r.put(\"player_name\", player.get(i).get(0))\n            r.put(\"agent_name\", player.get(i).get(1))\n            r.put(\"agent_description\", role.get(i))\n            r.put(\"单词\", role.get(i).startsWith(\"平民\") ? words.get(wordIdx).get(1 - underCoverWordIdx) : words.get(wordIdx).get(underCoverWordIdx))\n            return r\n        }\n    }\n}\n\ndef convertRequest(String request) {\n    def gson = new Gson()\n    def roles = randRole()\n    return gson.toJson(roles)\n}\n\nconvertRequest(request)",
  "responseGroovy": "import com.google.gson.Gson\n\nclass LLMResponse {\n    \n    int successCode;\n    \n    String errorMessage;\n    \n    String answer;\n}\n\ndef convertResponse(String response) {\n    def gson = new Gson()\n    LLMResponse lr = gson.fromJson(response, LLMResponse.class)\n    \n    if (lr.getSuccessCode() == 0) {\n        return lr.getAnswer()\n    }\n    \n    throw new RuntimeException(lr.getErrorMessage())\n}\n\nconvertResponse(response)",
  "summaryGroovy": null,
  "manifestSchema": {"api":{"type":"http"},"auth":{"type":"none"},"description_for_human":"演示tool的返回结果","description_for_model":"演示tool的返回结果","headers":{},"name_for_human":"ToolSampleController.queryEditableResponse_response","schema_version":"v1"},
  "toolApiPath": "OPSGPT./.POST",
  "toolProtocol": "GROOVY",
  "serverUrl": null,
  "apiSchema": {"info":{"description":"演示tool的返回结果","title":"ToolSampleController.queryEditableResponse_response","version":"0.0.1"},"openapi":"3.0.0","paths":{"http":{"method":"POST","parameters":[{"in":"body","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-0"}},{"in":"query","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-1"}},{"in":"path","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-2"}}],"path":"/api/tool/sample/{pathVariable}","responses":{"200":{"application/json":{"$ref":"#/definitions/BaseResult_ToolResponse_"}}}}},"servers":[{"url":"https://opsgptcore-pre.alipay.com/api/tool/sample/{pathVariable}"}]},
  "operatorCreate": "169704",
  "operatorModified": "169704",
  "version": "3",
  "owner": "169704",
  "deleted": null,
  "type": "OPEN",
  "status": "PROD_PUBLISHED",
  "vdbPk": "447890596018669520",
  "selectSamples": "[null]",
  "selectVars": "[{}]",
  "invokeType": "SYNC",
  "tag": "SINGLE_TOOL:OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response",
  "toolExtraInfo": {
    "errMessage": null,
    "devVdbPk": "447890596018692596",
    "prodVdbPk": null,
    "summaryModel": null,
    "stepConfigList": null,
    "nexExtraInfo": null,
    "ispInfo": null,
    "rpcUniqueId": null
  },
  "pauseStatusList": null,
  "configMap": null
}