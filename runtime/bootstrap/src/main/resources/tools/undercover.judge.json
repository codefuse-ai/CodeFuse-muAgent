{
  "id": 2,
  "gmtCreate": "2024-07-17T07:20:35.000+00:00",
  "gmtModified": "2024-07-17T07:20:35.000+00:00",
  "toolKey": "undercover.judge",
  "toolDefinition": {"description":"演示tool的返回结果","name":"OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response","parameters":{"description":"演示tool的返回结果","properties":{"button":{"description":"非必填，按钮名称，默认值为「重试」","requestType":"body","type":"string"},"pathVariable":{"description":"路径参数","requestType":"path","type":"string"},"requestParam":{"description":"请求参数","requestType":"query","type":"string"}},"required":[],"type":"object"},"result":{"description":"返回信息","properties":{},"type":"object"}},
  "toolId": null,
  "description": "判断游戏是否结束",
  "toolName": "判断游戏是否结束",
  "pauseStatus": "EXECUTING",
  "transparentInfo": null,
  "intention": null,
  "input": null,
  "output": null,
  "exeNormal": true,
  "message": null,
  "requestGroovy": "import com.alipay.muagent.model.connector.http.HttpParameters\nimport com.google.gson.Gson\n\nclass Content {\n    String text;\n}\n\ndef getMemory() {\n    return binding.hasVariable(\"stepMemory\") ? (String) binding.getVariable(\"stepMemory\") : \"[null]\"\n}\n\ndef convertRequest(String request) {\n    def gson = new Gson()\n    String template = \"##本局游戏历史记录##\\n{memory}\\n\\n##背景##\\n你是一个逻辑判断大师，你正在参与“谁是卧底”这个游戏，你的角色是[主持人]。你熟悉“谁是卧底”游戏的完整流程，现在需要判断当前游戏是否结束。\\n\\n##任务##\\n你的任务是判断当前游戏是否结束，规则如下：\\n根据【重要信息】感知每一轮被投票死亡的玩家。 统计目前存活的[平民]玩家数量、[卧底]玩家数量。格式{\\\"存活的卧底\\\":[player_name], \\\"存活的平民\\\":[player_name]},判断以下条件中的一个是否满足：\\n1. \\t卧底玩家全部已经死亡（即 存活[卧底]数量为0）。\\n2.  存活的[平民]数量与存活的[卧底]数量相等。\\n如果其中一个条件满足，则游戏结束；否则，游戏需要继续。\\n\\n##输出##\\n返回jsonstr 格式。{\\\"thought\\\": str, \\\"存活的玩家信息\\\": {\\\"存活的卧底\\\":[player_name], \\\"存活的平民\\\":[player_name]}, \\\"isEnd\\\": \\\"是\\\" or \\\"否\\\"}\\n-thought **根据本局游戏历史记录** 分析 游戏最开始有哪些玩家, 他们的身份是什么, 投票导致死亡的玩家有哪些? 分析当前存活的玩家有哪些 ? 是否触发了游戏结束条件? 等等\\n\\n##example##\\n{\\\"thought\\\": \\\"**游戏开始时** 有小杭, 小北, 阿光，夏明 四位玩家, 其中 小杭是[卧底], 小北和阿光和夏明是[平民],  阿光在第一轮被投票死亡了, 小杭和小北和夏明存活. 卧底存活， [平民]数量大于[卧底]数量, 因此游戏未结束 \\\", \\\"存活的玩家信息\\\": {\\\"存活的卧底\\\":[\\\"小杭\\\"], \\\"存活的平民\\\":[\\\"小北\\\"，\\\"夏明\\\"]}, \\\"isEnd\\\": \\\"否\\\" }\\n##example##\\n{\\\"thought\\\": \\\"**游戏开始时** 有小刘, 人类玩家, 小王， 凤岭， 四位玩家, 其中  人类玩家是[卧底], 小刘和小王和凤岭是[平民],  人类玩家被投票死亡了, 卧底数量为0, 因此游戏结束 \\\", \\\"存活的玩家信息\\\": {\\\"存活的卧底\\\":[\\\"\\\"], \\\"存活的平民\\\":[\\\"小刘\\\"，\\\"小王\\\"，\\\"凤岭\\\"]}, \\\"isEnd\\\": \\\"是\\\" }\\n##example##\\n{\\\"thought\\\": \\\"**游戏开始时** 有小张, 小赵, 人类玩家, 小钱 四位玩家, 其中 小赵是[卧底], 小张和人类玩家和小钱是[平民],  第一轮小钱被投票死亡了,第二轮小赵被投票死亡了， 小张、小赵和人类玩家存活. 存活的卧底数量为0, 因此游戏结束 \\\", \\\"存活的玩家信息\\\": {\\\"存活的卧底\\\":[\\\"\\\"], \\\"存活的平民\\\":[\\\"小张\\\",\\\"人类玩家\\\"]}, \\\"isEnd\\\": \\\"是\\\" }\\n                                                                                ##example##\\n{\\\"thought\\\": \\\"**游戏开始时** 有小张, 小赵, 人类玩家, 小钱 四位玩家, 其中 小赵是[卧底], 小张和人类玩家和小钱是[平民],  第一轮小钱被投票死亡了,第二轮人类玩家被投票死亡了， 小张和小赵存活. 卧底存活, [平民]数量等于[卧底]数量，因此游戏结束 \\\", \\\"存活的玩家信息\\\": {\\\"存活的卧底\\\":[\\\"小赵\\\"], \\\"存活的平民\\\":[\\\"小张\\\"]}, \\\"isEnd\\\": \\\"是\\\" }\\n\\n\\n##注意事项##\\n1. 所有玩家的座位、身份、agent_name、存活状态、游戏进展等信息在开头部分已给出。\\n2. \\\"是\\\" or \\\"否\\\" 如何选择？若游戏结束，则为\\\"是\\\"，否则为\\\"否\\\"。\\n3. 请直接输出jsonstr，不用输出markdown格式。\\n4. 游戏可能进行了不只一轮，可能有1个或者2个玩家已经死亡，请注意感知\\n\\n##结果##\\n\"\n\n    Content content = new Content()\n    content.text = template.replace(\"{memory}\", getMemory())\n\n\n    HttpParameters parameters = HttpParameters.builder().build()\n    parameters.setRequestBody(gson.toJson(content))\n    return gson.toJson(parameters)\n}\n\nconvertRequest(request)",
  "summaryGroovy": null,
  "responseGroovy": "import com.google.gson.Gson\n\nclass LLMResponse {\n\n    int successCode;\n\n    String errorMessage;\n\n    String answer;\n}\n\ndef convertResponse(String response) {\n    def gson = new Gson()\n    LLMResponse lr = gson.fromJson(response, LLMResponse.class)\n\n    if (lr.getSuccessCode() == 1) {\n        return lr.getAnswer()\n    }\n\n    throw new RuntimeException(lr.getErrorMessage())\n}\n\nconvertResponse(response)",
  "manifestSchema": {"api":{"type":"http"},"auth":{"type":"none"},"description_for_human":"演示tool的返回结果","description_for_model":"演示tool的返回结果","headers":{},"name_for_human":"ToolSampleController.queryEditableResponse_response","schema_version":"v1"},
  "toolApiPath": "OPSGPT./.POST",
  "toolProtocol": "HTTP",
  "serverUrl": null,
  "apiSchema": {"info":{"description":"演示tool的返回结果","title":"ToolSampleController.queryEditableResponse_response","version":"0.0.1"},"openapi":"3.0.0","paths":{"http":{"method":"POST","parameters":[{"in":"body","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-0"}},{"in":"query","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-1"}},{"in":"path","schema":{"$ref":"#ToolSampleController-queryEditableResponse-request-2"}}],"path":"/api/tool/sample/{pathVariable}","responses":{"200":{"application/json":{"$ref":"#/definitions/BaseResult_ToolResponse_"}}}}},"servers":[{"url":"http://ekgservice:3737/llm/generate"}]},
  "operatorCreate": "169704",
  "operatorModified": "169704",
  "version": "3",
  "owner": "169704",
  "deleted": null,
  "type": "OPEN",
  "status": "PROD_PUBLISHED",
  "vdbPk": "447890596018669520",
  "selectSamples": "[null]",
  "selectVars": "[{}]",
  "invokeType": "SYNC",
  "tag": "SINGLE_TOOL:OPSGPT:MAIN_SITE:ToolSampleController.queryEditableResponse_response",
  "toolExtraInfo": {
    "errMessage": null,
    "devVdbPk": "447890596018692596",
    "prodVdbPk": null,
    "summaryModel": null,
    "stepConfigList": null,
    "nexExtraInfo": null,
    "ispInfo": null,
    "rpcUniqueId": null
  },
  "pauseStatusList": null,
  "configMap": null
}