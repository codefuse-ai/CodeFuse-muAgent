version: 'Beta'
services:
  metad0:
    # image: docker.io/vesoft/nebula-metad:v3.8.0
    image: vesoft/nebula-metad:v3.8.0
    environment:
      USER: root
    command:
      - --meta_server_addrs=metad0:9559
      - --local_ip=metad0
      - --ws_ip=metad0
      - --port=9559
      - --ws_http_port=19559
      - --data_path=/data/meta
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://metad0:19559/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9559:9559
      - 19559:19559
      - 19560
    volumes:
      - ./data/meta0:/data/meta
      - ./logs/meta0:/logs
    networks:
      - ekg-net
    restart: on-failure
    cap_add:
      - SYS_PTRACE

  storaged0:
    # image: docker.io/vesoft/nebula-storaged:v3.8.0
    image: vesoft/nebula-storaged:v3.8.0
    environment:
      USER: root
      TZ:   "${TZ}"
    command:
      - --meta_server_addrs=metad0:9559
      - --local_ip=storaged0
      - --ws_ip=storaged0
      - --port=9779
      - --ws_http_port=19779
      - --data_path=/data/storage
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - metad0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://storaged0:19779/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9779:9779
      - 19779:19779
      - 19780
    volumes:
      - ./data/storage0:/data/storage
      - ./logs/storage0:/logs
    networks:
      - ekg-net
    restart: on-failure
    cap_add:
      - SYS_PTRACE

  graphd:
    # image: docker.io/vesoft/nebula-graphd:v3.8.0
    image: vesoft/nebula-graphd:v3.8.0
    environment:
      USER: root
      TZ:   "${TZ}"
    command:
      - --meta_server_addrs=metad0:9559
      - --port=9669
      - --local_ip=graphd
      - --ws_ip=graphd
      - --ws_http_port=19669
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - storaged0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://graphd:19669/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9669:9669
      - 19669:19669
      - 19670
    volumes:
      - ./logs/graph:/logs
    networks:
      - ekg-net
    restart: on-failure
    cap_add:
      - SYS_PTRACE

  redis-stack:
    image: redis/redis-stack:7.4.0-v0
    container_name: redis-stack
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ./logs/redis:/var/lib/redis/logs
      - ./examples/redis-stack.conf:/redis-stack.conf
      - ./data/redis:/data
    networks:
      - ekg-net
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
  

  ollama:
    image: ollama/ollama:0.3.6
    container_name: ollama
    environment:
      USER: root
      TZ:   "${TZ}"
    ports:
      - 11434:11434
    # volumes:
      # - //d/models/ollama:/root/.ollama # windows path
      # - /Users/xxxx/Desktop/ollama:/root/.ollama # linux/mac path
    networks:
      - ekg-net
    restart: on-failure
    cap_add:
      - SYS_PTRACE
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all  # 或者您想要的数量，例如 1
    #           capabilities: [gpu]


  mysql:
    image: mysql:8.4.3
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_DATABASE: 'muagent'
      MYSQL_USER: 'muagent'
      MYSQL_PASSWORD: 'muagent'
    ports:
      - "3306:3306"
    volumes:
      - ./examples/mysql/db:/var/lib/mysql
      - ./examples/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf
      - ./examples/mysql/init:/docker-entrypoint-initdb.d
    restart: on-failure
    networks:
      - ekg-net

  runtime:
    build:
      context: ./runtime
      dockerfile: Dockerfile.no-package
    image: runtime:0.1.1
    container_name: runtime
    environment:
      USER:
        root
    ports:
      - 8080:8080
    networks:
      - ekg-net
    volumes:
      - ./runtime:/home/user/runtime
    depends_on:
      - mysql
    command: ["bash", "-c", "cd /home/user/runtime && mvn package && java -jar /home/user/runtime/bootstrap/muagent-runtime.jar"]

  ekgservice:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ekgservice
    image: muagent:0.1.1
    environment:
      USER: root
      TZ:   "${TZ}"
      OLLAMA_HOST: http://ollama:11434
      PYTHONPATH: /home/user/muagent/examples/ekg_examples
    ports:
      - 3737:3737
    volumes:
      - ./examples:/home/user/muagent/examples
      - ./muagent:/home/user/muagent/muagent
      - ./tests:/home/user/muagent/tests
    restart: on-failure
    networks:
      - ekg-net
    command: sh -c "uvicorn start:app --reload --reload-dir /home/user/muagent/examples --reload-dir /home/user/muagent/muagent --reload-exclude */test_config.py --port=3737 --host=0.0.0.0"

  ekgfrontend:
    build:
      context: .
      dockerfile: Dockerfile_frontend
    container_name: ekgfrontend
    image: ekgfrontend:0.1.0
    environment:
      USER: root
      TZ:   "${TZ}"
    ports:
      - 8000:8000
    volumes:
      - ./examples:/home/user/muagent/examples
      - ./frontend:/home/user/muagent/frontend
    restart: on-failure
    networks:
      - ekg-net
    command: ["sh", "-c", "cp -rf /home/user/muagent/frontend /home/user && cd /home/user/frontend && npm run start"]

networks:
  ekg-net: 
    external: true